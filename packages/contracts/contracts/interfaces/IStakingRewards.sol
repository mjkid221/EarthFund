// SPDX-License-Identifier: MIT
pragma solidity 0.8.13;

interface IStakingRewards {
    /// ### Structs
    struct RewardDistribution {
        uint256 totalStake;
        uint256 rewardPerToken;
    }
    struct UserStake {
        uint256 stakedAmount;
        uint256 rewardsClaimed;
    }

    /// ### Events
    event Stake(address indexed user, address indexed daoToken, uint256 amount);
    event Unstake(
        address indexed user,
        address indexed daoToken,
        uint256 amount
    );
    event ClaimRewards(
        address indexed user,
        address indexed daoToken,
        uint256 amount
    );
    event Distribution(address indexed daoToken, uint256 amount);

    /// ### Functions
    /// @notice Stakes amount of dao token into the contract
    /// @param _daoToken The governance token of the dao to be staked.
    /// @param _amount The amount of governance token to be staked
    function stake(address _daoToken, uint256 _amount) external;

    /// @notice Unstakes and transfers out a given amount of dao governance tokens
    /// @dev This function will also claim any outstanding rewards for the user
    /// @param _daoToken  The dao governance token to unstake
    /// @param _amount  The amount to remove
    /// @param _to The destination for the dao tokens and rewards
    function unstake(
        address _daoToken,
        uint256 _amount,
        address _to
    ) external;

    /// @notice Claims any outstanding rewards for the user for the specified dao
    /// @param _daoToken  The dao to claim rewards for.
    /// @param _to The destination for the rewards
    function claimRewards(address _daoToken, address _to) external;

    /// @notice Withdraws the user's dao governance tokens without claiming any outstanding rewards
    /// @dev To be used as an emergency exit hatch for users. This will permanently lock any outstanding rewards for the user in the contract.
    /// @param _daoToken The dao governance token to eject.
    /// @param _to The destination wallet for the ejected tokens
    function emergencyEject(address _daoToken, address _to) external;

    /// @notice Updates the dao distribution to include an additional amount
    /// @dev For gas reasons, this shouldn't pull reward tokens into itself. It should track an expected balance, and verify that _amount is >= the difference between the two. It should consume the entire difference, not just the _amount param
    /// @dev This should be coded in such a way as to not require any kind of authorization other than providing an amount of reward tokens.
    /// @dev This should handle cases where there aren't any tokens staked: first staker gets everything.
    /// @param _daoToken The dao to distribute rewards to
    /// @param _amount The amount of reward token to distribute
    function distributeRewards(address _daoToken, uint256 _amount) external;

    /// ### Autogenerated getter functions
    function rewardToken() external view returns (address rewardToken);

    function currentRewardBalance()
        external
        view
        returns (uint256 currentRewardBalance);
}
