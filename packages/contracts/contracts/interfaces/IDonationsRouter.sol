// SPDX-License-Identifier: MIT
pragma solidity 0.8.13;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

import "../interfaces/IStakingRewards.sol";

interface IDonationsRouter {
    /// ### Structs
    struct DaoRegistration {
        address daoToken;
        uint256 rewardRate;
    }
    /// ### Enums
    enum FeeType {
        REWARD,
        PLATFORM
    }

    /// ### Events
    event SetFee(FeeType feeType, uint256 newFee);
    event RegisterDao(
        address indexed daoSafe,
        address indexed daoToken,
        uint256 rewardRate
    );
    event Donate(
        address indexed user,
        address indexed daoSafe,
        uint256 netAmount,
        uint256 platformFee,
        uint256 rewardAmount
    );

    /// ### Functions
    /// @notice Allows the user to donate _amount of the base token directly
    /// @param _daoSafe The dao to donate to
    /// @param _amount The amount of base toke to donate
    function donate(address _daoSafe, uint256 _amount) external;

    /// @notice Registers a dao for donations
    /// @dev Should be restricted to the platform operator
    /// @param _daoSafe The gnosis safe address for the dao
    /// @param _daoToken The governance token for the dao. This cannot be duplicated or the rewards will be blended in the staking contract
    /// @param _rewardFee The reward percentage to cut from donations
    function registerDao(
        address _daoSafe,
        address _daoToken,
        uint256 _rewardFee
    ) external;

    /// @notice Sets the fee split for donations
    /// @param _feeType The type of fee to set. Platform fee can only be set by the platform owner. Reward fee can only be changed by the Dao that's calling the function.
    /// @param _fee The new fee percentage schedule
    function setFee(FeeType _feeType, uint256 _fee) external;

    /// @notice Sets the address that can register new daos. Should be set to the current governor
    /// @param _newRegistrar The new registrar
    function setRegistrar(address _newRegistrar) external;

    /// ### Autogenerated getter functions
    function baseToken() external view returns (ERC20 baseToken);

    function stakingContract()
        external
        view
        returns (IStakingRewards stakingContract);

    function daoRegistry(address _daoSafe)
        external
        view
        returns (address daoToken, uint256 rewardRate);

    function registrar() external returns (address registrar);

    function platformFee() external view returns (uint256 platformFee);
}
