// SPDX-License-Identifier: MIT
pragma solidity 0.8.13;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

import "../interfaces/IStakingRewards.sol";

interface IDonationsRouter {
    /// ### Structs
    struct CauseRegistrationRequest {
        address owner;
        uint256 rewardPercentage;
        address daoToken;
    }

    struct CauseRecord {
        address owner;
        address defaultWallet; /// Default wallet is calculated with cause Id and thin wallet id being equal to each other
        address daoToken;
        uint256 rewardPercentage; /// A PRBMath 60.18 fixed point number. 1e16 == 1% and 1e18 == 100%
    }

    struct WithdrawalRequest {
        address token;
        address recipient;
        uint256 amount;
    }

    struct ThinWalletID {
        uint256 causeId;
        bytes thinWalletId;
    }

    /// ### Events

    event RegisterCause(CauseRecord cause);
    event RegisterWallet(address indexed walletAddress, ThinWalletID walletId);
    event WithdrawFromWallet(ThinWalletID wallet, WithdrawalRequest request);
    event UpdateCause(CauseRecord cause);
    event UpdateRewardAddress(
        address indexed oldRewardAddress,
        address indexed newAddress
    );
    event UpdateFee(uint256 oldFee, uint256 newFee);

    /// ### Functions

    /// @notice Creates a cause so that it can start using thin wallets that it controls
    /// @dev This should be an open function
    /// @param _cause  The cause to be registered
    function registerCause(CauseRegistrationRequest calldata _cause) external;

    /// @notice Updates a cause
    /// @dev Can only be called by the current owner of the cause
    /// @param _causeId  The cause to update
    /// @param _cause  The new details of the cause
    function updateCause(
        uint256 _causeId,
        CauseRegistrationRequest calldata _cause
    ) external;

    /// @notice Sets the address of the staking contract so rewards can be distributed
    /// @dev This should be secured
    /// @param _rewardContract  The new staking contract
    // function setRewardAddress(address _rewardContract) external;

    /// @notice Calculates the address that a given thin wallet is or will be deployed to
    /// @param _walletId  The wallet parameters to calculate the address from
    function calculateThinWallet(ThinWalletID calldata _walletId)
        external
        view
        returns (address wallet);

    /// @notice Deploys a thin wallet to the address derived from the parameters given
    /// @param _walletId  The wallet parameters
    /// @param _owners  The wallet owners to set. These accounts can transfer funds, so they should be limited
    function registerThinWallet(
        ThinWalletID calldata _walletId,
        address[] calldata _owners
    ) external;

    /// @notice Withdraws funds from the specified thin wallet
    /// @param _walletId  The wallet address parameters
    /// @param _withdrawal  An array of withdrawal requests for the wallet to process
    function withdrawFromThinWallet(
        ThinWalletID calldata _walletId,
        WithdrawalRequest calldata _withdrawal
    ) external;

    /// @notice Allows the platform owner to set the platform fee
    /// @dev Only the platform owner should be able to call this
    /// @param _fee  The new platform fee
    function setPlatformFee(uint256 _fee) external;

    /// ### Autogenerated getters

    function baseToken() external view returns (ERC20 baseToken);

    function stakingContract()
        external
        view
        returns (IStakingRewards stakingContract);

    function causeId() external view returns (uint256 causeId);

    function causeRecords(uint256 causeId)
        external
        view
        returns (
            address owner,
            address defaultWallet,
            address daoToken,
            uint256 rewardPercentage
        );

    function platformFee() external view returns (uint256 fee);

    function deployedWallets(bytes32 _salt)
        external
        view
        returns (address wallet);

    function walletImplementation()
        external
        view
        returns (address walletImplementation);
}
