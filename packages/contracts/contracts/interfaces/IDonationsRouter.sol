// SPDX-License-Identifier: MIT
pragma solidity 0.8.13;

interface IDonateRouter {
    /// ### Structs
    struct FeeSplit {
        uint256 rewardFee;
        uint256 platformFee;
    }

    /// ### Events
    event SetFee(FeeSplit oldFee, FeeSplit newFee);
    event RegisterDao(address daoSafe, address daoToken);
    event Donate(address user, address daoSafe, uint256 amount);

    /// ### Functions
    /// @notice Allows the user to donate _amount of the base token directly
    /// @param _daoSafe The dao to donate to
    /// @param _amount The amount of base toke to donate
    function donate(address _daoSafe, uint256 _amount) external;

    /// @notice Registers a dao for donations
    /// @dev Should be restricted to the platform operator
    /// @param _daoSafe The gnosis safe address for the dao
    /// @param _daoToken The governance token for the dao. This cannot be duplicated or the rewards will be blended in the staking contract
    function registerDao(address _daoSafe, address _daoToken) external;

    /// @notice Sets the fee split for donations
    /// @dev Should be restricted to the platform operator
    /// @param _fees The new fee percentage schedule
    function setFees(FeeSplit calldata _fees) external;

    /// ### Autogenerated getter functions
    function baseToken() external view returns (address baseToken);

    function stakingContract() external view returns (address stakingContract);

    function daoRegistry(address _daoSafe)
        external
        view
        returns (address daoToken);

    function fees() external view returns (FeeSplit memory fees);

    function dexAggregator() external view returns (address dexAggregator);
}
