{
  "address": "0xeA890c94c884Cfb91506C4920D6156a4BF6420b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_walletImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "defaultWallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "daoToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardPercentage",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IDonationsRouter.CauseRecord",
          "name": "cause",
          "type": "tuple"
        }
      ],
      "name": "RegisterCause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "causeId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "thinWalletId",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IDonationsRouter.ThinWalletID",
          "name": "walletId",
          "type": "tuple"
        }
      ],
      "name": "RegisterWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "defaultWallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "daoToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardPercentage",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IDonationsRouter.CauseRecord",
          "name": "cause",
          "type": "tuple"
        }
      ],
      "name": "UpdateCause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldRewardAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdateRewardAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "causeId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "thinWalletId",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IDonationsRouter.ThinWalletID",
          "name": "wallet",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IDonationsRouter.WithdrawalRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "WithdrawFromWallet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "causeId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "thinWalletId",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDonationsRouter.ThinWalletID",
          "name": "_walletId",
          "type": "tuple"
        }
      ],
      "name": "calculateThinWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "causeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "causeRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daoToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "deployedWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardPercentage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "daoToken",
              "type": "address"
            }
          ],
          "internalType": "struct IDonationsRouter.CauseRegistrationRequest",
          "name": "_cause",
          "type": "tuple"
        }
      ],
      "name": "registerCause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "causeId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "thinWalletId",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDonationsRouter.ThinWalletID",
          "name": "_walletId",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        }
      ],
      "name": "registerThinWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setPlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IStakingRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_causeId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardPercentage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "daoToken",
              "type": "address"
            }
          ],
          "internalType": "struct IDonationsRouter.CauseRegistrationRequest",
          "name": "_cause",
          "type": "tuple"
        }
      ],
      "name": "updateCause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "causeId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "thinWalletId",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDonationsRouter.ThinWalletID",
          "name": "_walletId",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDonationsRouter.WithdrawalRequest",
          "name": "_withdrawal",
          "type": "tuple"
        }
      ],
      "name": "withdrawFromThinWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x029b7d93491c3d5dc00a734886fdb601aa38032456da73ea7cc34bd9b888a12a",
  "receipt": {
    "to": null,
    "from": "0x5f8DAE75066f48554A8Ed9304E0351D72e3dc1Ba",
    "contractAddress": "0xeA890c94c884Cfb91506C4920D6156a4BF6420b1",
    "transactionIndex": 20,
    "gasUsed": "3110569",
    "logsBloom": "0x
    "blockHash": "0x5c679816ce34955dcc5cf1d77f8632ec2ab95df3a720ed0d10e46c32def36ed5",
    "transactionHash": "0x029b7d93491c3d5dc00a734886fdb601aa38032456da73ea7cc34bd9b888a12a",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 10929676,
        "transactionHash": "0x029b7d93491c3d5dc00a734886fdb601aa38032456da73ea7cc34bd9b888a12a",
        "address": "0xeA890c94c884Cfb91506C4920D6156a4BF6420b1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f8dae75066f48554a8ed9304e0351d72e3dc1ba"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x5c679816ce34955dcc5cf1d77f8632ec2ab95df3a720ed0d10e46c32def36ed5"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 10929676,
        "transactionHash": "0x029b7d93491c3d5dc00a734886fdb601aa38032456da73ea7cc34bd9b888a12a",
        "address": "0xeA890c94c884Cfb91506C4920D6156a4BF6420b1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005f8dae75066f48554a8ed9304e0351d72e3dc1ba",
          "0x0000000000000000000000005f8dae75066f48554a8ed9304e0351d72e3dc1ba"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x5c679816ce34955dcc5cf1d77f8632ec2ab95df3a720ed0d10e46c32def36ed5"
      }
    ],
    "blockNumber": 10929676,
    "cumulativeGasUsed": "12875118",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd11Dd8a141cdb2FD1d464DAb18C43238e4ccaDc1",
    "0x351e9c4de57a1854397E97Df909Ea0b3D7cbd219",
    "0x5f8DAE75066f48554A8Ed9304E0351D72e3dc1Ba",
    "0x906d76E49F218638FE30e791e50A5E6F1E8fefaA"
  ],
  "numDeployments": 1,
  "solcInputHash": "826add05236a51c6d2cdd01b52ebf0a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDonationsRouter.CauseRecord\",\"name\":\"cause\",\"type\":\"tuple\"}],\"name\":\"RegisterCause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"thinWalletId\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IDonationsRouter.ThinWalletID\",\"name\":\"walletId\",\"type\":\"tuple\"}],\"name\":\"RegisterWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDonationsRouter.CauseRecord\",\"name\":\"cause\",\"type\":\"tuple\"}],\"name\":\"UpdateCause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRewardAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"thinWalletId\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IDonationsRouter.ThinWalletID\",\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDonationsRouter.WithdrawalRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"WithdrawFromWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"thinWalletId\",\"type\":\"bytes\"}],\"internalType\":\"struct IDonationsRouter.ThinWalletID\",\"name\":\"_walletId\",\"type\":\"tuple\"}],\"name\":\"calculateThinWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"causeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"causeRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deployedWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daoToken\",\"type\":\"address\"}],\"internalType\":\"struct IDonationsRouter.CauseRegistrationRequest\",\"name\":\"_cause\",\"type\":\"tuple\"}],\"name\":\"registerCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"thinWalletId\",\"type\":\"bytes\"}],\"internalType\":\"struct IDonationsRouter.ThinWalletID\",\"name\":\"_walletId\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"registerThinWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daoToken\",\"type\":\"address\"}],\"internalType\":\"struct IDonationsRouter.CauseRegistrationRequest\",\"name\":\"_cause\",\"type\":\"tuple\"}],\"name\":\"updateCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"thinWalletId\",\"type\":\"bytes\"}],\"internalType\":\"struct IDonationsRouter.ThinWalletID\",\"name\":\"_walletId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDonationsRouter.WithdrawalRequest\",\"name\":\"_withdrawal\",\"type\":\"tuple\"}],\"name\":\"withdrawFromThinWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateThinWallet((uint256,bytes))\":{\"params\":{\"_walletId\":\"The wallet parameters to calculate the address from\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerCause((address,uint256,address))\":{\"details\":\"This should be an open function\",\"params\":{\"_cause\":\"The cause to be registered\"}},\"registerThinWallet((uint256,bytes),address[])\":{\"params\":{\"_owners\":\"The wallet owners to set. These accounts can transfer funds, so they should be limited\",\"_walletId\":\"The wallet parameters\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPlatformFee(uint256)\":{\"details\":\"Only the platform owner should be able to call this\",\"params\":{\"_fee\":\"The new platform fee\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCause(uint256,(address,uint256,address))\":{\"details\":\"Can only be called by the current owner of the cause\",\"params\":{\"_cause\":\"The new details of the cause\",\"_causeId\":\"The cause to update\"}},\"withdrawFromThinWallet((uint256,bytes),(address,address,uint256))\":{\"params\":{\"_walletId\":\"The wallet address parameters\",\"_withdrawal\":\"An array of withdrawal requests for the wallet to process\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"events\":{\"RegisterCause((address,address,address,uint256))\":{\"notice\":\"### Events\"}},\"kind\":\"user\",\"methods\":{\"baseToken()\":{\"notice\":\"### Autogenerated getters\"},\"calculateThinWallet((uint256,bytes))\":{\"notice\":\"Calculates the address that a given thin wallet is or will be deployed to\"},\"causeRecords(uint256)\":{\"notice\":\"Cause ID => Cause record\"},\"deployedWallets(bytes32)\":{\"notice\":\"Thin wallet salt => thin wallet address\"},\"registerCause((address,uint256,address))\":{\"notice\":\"Creates a cause so that it can start using thin wallets that it controls\"},\"registerThinWallet((uint256,bytes),address[])\":{\"notice\":\"Deploys a thin wallet to the address derived from the parameters given\"},\"setPlatformFee(uint256)\":{\"notice\":\"Allows the platform owner to set the platform fee\"},\"updateCause(uint256,(address,uint256,address))\":{\"notice\":\"Updates a cause\"},\"withdrawFromThinWallet((uint256,bytes),(address,address,uint256))\":{\"notice\":\"Withdraws funds from the specified thin wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/DonationsRouter.sol\":\"DonationsRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@prb/math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"@prb/math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"},\"contracts/implementations/DonationsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@prb/math/contracts/PRBMathUD60x18.sol\\\";\\nimport \\\"../interfaces/IDonationsRouter.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/IThinWallet.sol\\\";\\n\\ncontract DonationsRouter is IDonationsRouter, Ownable {\\n    using PRBMathUD60x18 for uint256;\\n\\n    ERC20 public immutable override baseToken;\\n    IStakingRewards public immutable override stakingContract;\\n\\n    address public immutable override walletImplementation;\\n\\n    uint256 public override causeId;\\n    uint256 public override platformFee;\\n\\n    /// Cause ID => Cause record\\n    mapping(uint256 => CauseRecord) public override causeRecords;\\n\\n    /// Thin wallet salt => thin wallet address\\n    mapping(bytes32 => address) public override deployedWallets;\\n\\n    constructor(\\n        address _baseToken,\\n        address _stakingContract,\\n        address _owner,\\n        address _walletImplementation\\n    ) {\\n        require(_baseToken != address(0), \\\"invalid base token\\\");\\n        require(_stakingContract != address(0), \\\"invalid staking contract\\\");\\n        require(_owner != address(0), \\\"invalid owner\\\");\\n        require(_walletImplementation != address(0), \\\"invalid implementation\\\");\\n\\n        baseToken = ERC20(_baseToken);\\n        stakingContract = IStakingRewards(_stakingContract);\\n        walletImplementation = _walletImplementation;\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    function setPlatformFee(uint256 _fee) external override onlyOwner {\\n        emit UpdateFee(platformFee, _fee);\\n        platformFee = _fee;\\n    }\\n\\n    function registerCause(CauseRegistrationRequest calldata _cause)\\n        external\\n        override\\n    {\\n        require(_cause.owner != address(0), \\\"invalid owner\\\");\\n        require(_cause.daoToken != address(0), \\\"invalid token\\\");\\n        uint256 id = ++causeId; // Increments then returns, thus causeId starts at 1\\n\\n        CauseRecord memory cause = CauseRecord({\\n            owner: _cause.owner,\\n            rewardPercentage: _cause.rewardPercentage,\\n            daoToken: _cause.daoToken,\\n            defaultWallet: calculateThinWallet(\\n                ThinWalletID({causeId: id, thinWalletId: abi.encode(id)})\\n            )\\n        });\\n\\n        causeRecords[id] = cause;\\n\\n        emit RegisterCause(cause);\\n        \\n        address[] memory owners = new address[](1);\\n        owners[0] = _cause.owner;\\n        _deployWallet(_getSalt(ThinWalletID({causeId: id, thinWalletId: abi.encode(id)})), owners);\\n\\n        ERC20(_cause.daoToken).approve(\\n            address(stakingContract),\\n            type(uint256).max\\n        );\\n    }\\n\\n    function updateCause(\\n        uint256 _causeId,\\n        CauseRegistrationRequest calldata _cause\\n    ) external override {\\n        require(_causeId <= causeId, \\\"invalid cause\\\");\\n        CauseRecord memory cause = causeRecords[_causeId];\\n        require(msg.sender == cause.owner, \\\"not authorized\\\");\\n\\n        require(_cause.daoToken != address(0), \\\"invalid token\\\");\\n        require(_cause.owner != address(0), \\\"invalid owner\\\");\\n\\n        address oldToken = cause.daoToken;\\n\\n        cause.owner = _cause.owner;\\n        cause.rewardPercentage = _cause.rewardPercentage;\\n        cause.daoToken = _cause.daoToken;\\n\\n        causeRecords[_causeId] = cause;\\n\\n        emit UpdateCause(cause);\\n\\n        if (_cause.daoToken != oldToken) {\\n            ERC20(_cause.daoToken).approve(\\n                address(stakingContract),\\n                type(uint256).max\\n            );\\n        }\\n    }\\n\\n    function calculateThinWallet(ThinWalletID memory _walletId)\\n        public\\n        view\\n        override\\n        returns (address wallet)\\n    {\\n        wallet = Clones.predictDeterministicAddress(\\n            walletImplementation,\\n            _getSalt(_walletId)\\n        );\\n    }\\n\\n    function registerThinWallet(\\n        ThinWalletID calldata _walletId,\\n        address[] calldata _owners\\n    ) external override {\\n        bytes32 salt = _getSalt(_walletId);\\n        require(deployedWallets[salt] == address(0), \\\"already deployed\\\");\\n        require(_owners.length >= 1, \\\"invalid owners\\\");\\n        CauseRecord memory cause = causeRecords[_walletId.causeId];\\n\\n        require(_walletId.causeId <= causeId, \\\"invalid cause\\\");\\n        require(msg.sender == cause.owner, \\\"unauthorized\\\");\\n\\n        address wallet = calculateThinWallet(_walletId);\\n\\n        emit RegisterWallet(wallet, _walletId);\\n\\n        _deployWallet(salt, _owners);\\n    }\\n\\n    function withdrawFromThinWallet(\\n        ThinWalletID calldata _walletId,\\n        WithdrawalRequest calldata _withdrawal\\n    ) external override {\\n        require(_walletId.causeId <= causeId, \\\"invalid cause\\\");\\n\\n        CauseRecord memory cause = causeRecords[_walletId.causeId];\\n\\n        require(msg.sender == cause.owner, \\\"unauthorized\\\");\\n\\n        bytes32 salt = _getSalt(_walletId);\\n        IThinWallet wallet = IThinWallet(deployedWallets[salt]);\\n\\n        if (address(wallet) == address(0)) {\\n            address[] memory owners = new address[](1);\\n            owners[0] = cause.owner;\\n            wallet = IThinWallet(_deployWallet(salt, owners));\\n\\n            emit RegisterWallet(address(wallet), _walletId);\\n        }\\n\\n        emit WithdrawFromWallet(_walletId, _withdrawal);\\n\\n        address rewardToken = address(baseToken);\\n\\n        if (_withdrawal.token == rewardToken) {\\n            uint256 rewardAmount = _withdrawal.amount.mul(\\n                cause.rewardPercentage\\n            );\\n            uint256 feeAmount = _withdrawal.amount.mul(platformFee);\\n\\n            IThinWallet.TokenMovement[]\\n                memory transfers = new IThinWallet.TokenMovement[](3);\\n            transfers[0] = IThinWallet.TokenMovement({\\n                token: rewardToken,\\n                recipient: owner(),\\n                amount: feeAmount\\n            });\\n            transfers[1] = IThinWallet.TokenMovement({\\n                token: rewardToken,\\n                recipient: _withdrawal.recipient,\\n                amount: _withdrawal.amount - (feeAmount + rewardAmount)\\n            });\\n            transfers[2] = IThinWallet.TokenMovement({\\n                token: rewardToken,\\n                recipient: address(this),\\n                amount: rewardAmount\\n            });\\n\\n            wallet.transferERC20(transfers);\\n    \\n            (stakingContract.rewardToken()).increaseAllowance(address(stakingContract), rewardAmount);\\n            stakingContract.distributeRewards(cause.daoToken, rewardAmount);\\n        } else {\\n            IThinWallet.TokenMovement[]\\n                memory transfers = new IThinWallet.TokenMovement[](1);\\n            transfers[0] = IThinWallet.TokenMovement({\\n                token: rewardToken,\\n                recipient: _withdrawal.recipient,\\n                amount: _withdrawal.amount\\n            });\\n            wallet.transferERC20(transfers);\\n        }\\n    }\\n\\n    /// ### Internal functions\\n    function _getSalt(ThinWalletID memory _walletId)\\n        internal\\n        pure\\n        returns (bytes32 salt)\\n    {\\n        salt = keccak256(abi.encode(_walletId));\\n    }\\n\\n    function _deployWallet(bytes32 salt, address[] memory owners)\\n        internal\\n        returns (address wallet)\\n    {\\n        wallet = Clones.cloneDeterministic(walletImplementation, salt);\\n\\n        deployedWallets[salt] = wallet;\\n\\n        IThinWallet(wallet).initialize(address(this), owners);\\n    }\\n}\\n\",\"keccak256\":\"0x234de06867ced9b7f25612dd6ff68d5a39f28082a2d9456bc4a18e01c332bcb9\",\"license\":\"MIT\"},\"contracts/interfaces/IDonationsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\ninterface IDonationsRouter {\\n    /// ### Structs\\n    struct CauseRegistrationRequest {\\n        address owner;\\n        uint256 rewardPercentage;\\n        address daoToken;\\n    }\\n\\n    struct CauseRecord {\\n        address owner;\\n        address defaultWallet; /// Default wallet is calculated with cause Id and thin wallet id being equal to each other\\n        address daoToken;\\n        uint256 rewardPercentage; /// A PRBMath 60.18 fixed point number. 1e16 == 1% and 1e18 == 100%\\n    }\\n\\n    struct WithdrawalRequest {\\n        address token;\\n        address recipient;\\n        uint256 amount;\\n    }\\n\\n    struct ThinWalletID {\\n        uint256 causeId;\\n        bytes thinWalletId;\\n    }\\n\\n    /// ### Events\\n\\n    event RegisterCause(CauseRecord cause);\\n    event RegisterWallet(address indexed walletAddress, ThinWalletID walletId);\\n    event WithdrawFromWallet(ThinWalletID wallet, WithdrawalRequest request);\\n    event UpdateCause(CauseRecord cause);\\n    event UpdateRewardAddress(\\n        address indexed oldRewardAddress,\\n        address indexed newAddress\\n    );\\n    event UpdateFee(uint256 oldFee, uint256 newFee);\\n\\n    /// ### Functions\\n\\n    /// @notice Creates a cause so that it can start using thin wallets that it controls\\n    /// @dev This should be an open function\\n    /// @param _cause  The cause to be registered\\n    function registerCause(CauseRegistrationRequest calldata _cause) external;\\n\\n    /// @notice Updates a cause\\n    /// @dev Can only be called by the current owner of the cause\\n    /// @param _causeId  The cause to update\\n    /// @param _cause  The new details of the cause\\n    function updateCause(\\n        uint256 _causeId,\\n        CauseRegistrationRequest calldata _cause\\n    ) external;\\n\\n    /// @notice Sets the address of the staking contract so rewards can be distributed\\n    /// @dev This should be secured\\n    /// @param _rewardContract  The new staking contract\\n    // function setRewardAddress(address _rewardContract) external;\\n\\n    /// @notice Calculates the address that a given thin wallet is or will be deployed to\\n    /// @param _walletId  The wallet parameters to calculate the address from\\n    function calculateThinWallet(ThinWalletID calldata _walletId)\\n        external\\n        view\\n        returns (address wallet);\\n\\n    /// @notice Deploys a thin wallet to the address derived from the parameters given\\n    /// @param _walletId  The wallet parameters\\n    /// @param _owners  The wallet owners to set. These accounts can transfer funds, so they should be limited\\n    function registerThinWallet(\\n        ThinWalletID calldata _walletId,\\n        address[] calldata _owners\\n    ) external;\\n\\n    /// @notice Withdraws funds from the specified thin wallet\\n    /// @param _walletId  The wallet address parameters\\n    /// @param _withdrawal  An array of withdrawal requests for the wallet to process\\n    function withdrawFromThinWallet(\\n        ThinWalletID calldata _walletId,\\n        WithdrawalRequest calldata _withdrawal\\n    ) external;\\n\\n    /// @notice Allows the platform owner to set the platform fee\\n    /// @dev Only the platform owner should be able to call this\\n    /// @param _fee  The new platform fee\\n    function setPlatformFee(uint256 _fee) external;\\n\\n    /// ### Autogenerated getters\\n\\n    function baseToken() external view returns (ERC20 baseToken);\\n\\n    function stakingContract()\\n        external\\n        view\\n        returns (IStakingRewards stakingContract);\\n\\n    function causeId() external view returns (uint256 causeId);\\n\\n    function causeRecords(uint256 causeId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            address defaultWallet,\\n            address daoToken,\\n            uint256 rewardPercentage\\n        );\\n\\n    function platformFee() external view returns (uint256 fee);\\n\\n    function deployedWallets(bytes32 _salt)\\n        external\\n        view\\n        returns (address wallet);\\n\\n    function walletImplementation()\\n        external\\n        view\\n        returns (address walletImplementation);\\n}\\n\",\"keccak256\":\"0xd0668827117a25a90eab3b78c3653596fcfe912f4b5e4a8004bac0fab690a7b3\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IStakingRewards {\\n    /// ### Structs\\n    struct RewardDistribution {\\n        uint256 totalStake;\\n        uint256 rewardPerToken; // Needs to be boosted by 1e18 before storing so we don't lose precision\\n    }\\n    // If totalstake is 0, first staker gets everything. When ejecting, or withdrawing, and totalstake becomes 0, reward per token should also be set to 0.\\n    struct UserStake {\\n        uint256 stakedAmount;\\n        uint256 rewardEntry;\\n        uint256 pendingRewards;\\n        uint256 timeStaked;\\n    }\\n\\n    /// ### Events\\n    event Stake(address indexed user, address indexed daoToken, uint256 amount);\\n    event Unstake(\\n        address indexed user,\\n        address indexed daoToken,\\n        uint256 amount\\n    );\\n    event ClaimRewards(\\n        address indexed user,\\n        address indexed daoToken,\\n        uint256 amount\\n    );\\n    event Distribution(address indexed daoToken, uint256 amount);\\n    event Eject(\\n        address indexed sender,\\n        address indexed daoToken,\\n        uint256 amount\\n    );\\n\\n    /// ### Functions\\n    /// @notice Updates the lock up period in state\\n    /// @param _lockupPeriod The new \\n    function setLockupPeriod(uint256 _lockupPeriod) external;\\n\\n    /// @notice Stakes amount of dao token into the contract\\n    /// @param _daoToken The governance token of the dao to be staked.\\n    /// @param _amount The amount of governance token to be staked\\n    function stake(address _daoToken, uint256 _amount) external;\\n\\n    /// @notice Stakes amount of dao token into the contract for a user\\n    /// @param _user The user the tokens are being staked on behalf for\\n    /// @param _daoToken The governance token of the dao to be staked.\\n    /// @param _amount The amount of governance token to be staked\\n    function stakeOnBehalf(address _user, address _daoToken, uint256 _amount) external;\\n\\n    /// @notice Unstakes and transfers out a given amount of dao governance tokens\\n    /// @dev This function will also claim any outstanding rewards for the user\\n    /// @param _daoToken The dao governance token to unstake\\n    /// @param _amount The amount to remove\\n    /// @param _to The destination for the dao tokens and rewards\\n    function unstake(\\n        address _daoToken,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Claims all outstanding rewards for the user for the specified dao\\n    /// @param _daoToken The dao to claim rewards for.\\n    /// @param _to The destination for the rewards\\n    function claimRewards(address _daoToken, address _to) external;\\n\\n    /// @notice Withdraws the user's dao governance tokens without claiming any outstanding rewards\\n    /// @dev To be used as an emergency exit hatch for users. This will permanently lock any outstanding rewards for the user in the contract.\\n    /// @param _daoToken The dao governance token to eject.\\n    /// @param _to The destination wallet for the ejected tokens\\n    function emergencyEject(address _daoToken, address _to) external;\\n\\n    /// @notice Updates the dao distribution to include an additional amount\\n    /// @dev This should pull tokens from the caller's account\\n    /// @dev This should be coded in such a way as to not require any kind of authorization other than providing an amount of reward tokens.\\n    /// @dev This should handle cases where there aren't any tokens staked: first staker gets everything.\\n    /// @param _daoToken The dao to distribute rewards to\\n    /// @param _amount The amount of reward token to distribute\\n    function distributeRewards(address _daoToken, uint256 _amount) external;\\n\\n    /// @notice Returns the amount of claimable reward tokens for a user for a given dao\\n    /// @param _user The user who staked the tokens\\n    /// @param _daoToken The governance token of the dao the user has staked\\n    /// @return rewardAmount The amount of the reward token that the user is entitled to\\n    function pendingRewards(address _user, address _daoToken)\\n        external\\n        view\\n        returns (uint256 rewardAmount);\\n\\n    /// ### Autogenerated getter functions\\n\\n    function lockupPeriod() external view returns (uint256);\\n\\n    function rewardToken() external view returns (ERC20 rewardToken);\\n\\n    function daoRewards(address _daoToken)\\n        external\\n        view\\n        returns (uint256 totalStake, uint256 rewardPerToken);\\n\\n    function userStakes(address _daoToken, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 stakedAmount,\\n            uint256 rewardEntry,\\n            uint256 pendingRewards,\\n            uint256 timeStaked\\n        );\\n}\\n\",\"keccak256\":\"0x01a00a2d4c8222edf80b8762d7e9e4b959ee1093cc6a8b4f12c678dd2f2e52af\",\"license\":\"MIT\"},\"contracts/interfaces/IThinWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IThinWallet {\\n  error InvalidPermissions(address _user);\\n\\n  struct TokenMovement {\\n    address token;\\n    address recipient;\\n    uint256 amount;\\n  }\\n\\n  struct EtherPaymentTransfer {\\n    address recipient;\\n    uint256 amount;\\n  }\\n\\n  /// ### Events\\n  event TransferERC20(TokenMovement[] transfers);\\n  event TransferEther(EtherPaymentTransfer[] transfers);\\n\\n  /// ### Functions\\n  /// @notice Initializes the thin wallet clone with the accounts that can control it\\n  /// @param _admin  This is should be set as the default admin. This will be the donation router\\n  /// @param _owners  The accounts that can call the transfer functions\\n  function initialize(address _admin, address[] calldata _owners) external;\\n\\n  /// @notice Transfers amounts of an ERC20 to one or more recipients\\n  /// @dev If the `setApprove` field is true, the contract should approve that recipient for type(uint256).max\\n  /// @param _transfers  An array of transfers. Each transfer object specifies the amount and recipient to send tokens to\\n  function transferERC20(\\n    TokenMovement[] calldata _transfers\\n  ) external;\\n\\n  /// @notice Transfers amounts of ether to one or more recipeints\\n  /// @dev This should use address(recipient).call to transfer the ether\\n  /// @param _transfers  The ether transfers\\n  function transferEther(EtherPaymentTransfer[] calldata _transfers) external;\\n\\n  // TODO: Needs a receive function for ether transfers: receive() external payable { }\\n}\\n\",\"keccak256\":\"0x9e16f5c55526c2ec237f29117745c855b8ae8baa315a9e395badb491dde2ff1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063c55dae6311610066578063c55dae6314610288578063ee99205c146102a6578063f2fde38b146102c4578063fecedb16146102e057610100565b8063715018a6146102265780638117abc1146102305780638da5cb5b1461024e578063b666b5161461026c57610100565b806326232a2e116100d357806326232a2e146101b45780632b523d44146101d25780635ae8b159146101ee5780636c3c2a6f1461020a57610100565b806312e8e2c314610105578063196a8dca146101215780631ea6c2db146101515780631ff24c0a14610181575b600080fd5b61011f600480360381019061011a91906123c1565b6102fe565b005b61013b600480360381019061013691906125aa565b6103bf565b6040516101489190612634565b60405180910390f35b61016b60048036038101906101669190612685565b6103fa565b6040516101789190612634565b60405180910390f35b61019b600480360381019061019691906123c1565b61042d565b6040516101ab94939291906126c1565b60405180910390f35b6101bc6104bd565b6040516101c99190612706565b60405180910390f35b6101ec60048036038101906101e79190612745565b6104c3565b005b61020860048036038101906102039190612804565b610a9f565b005b610224600480360381019061021f919061289f565b610e43565b005b61022e6117c7565b005b61023861184f565b6040516102459190612634565b60405180910390f35b610256611873565b6040516102639190612634565b60405180910390f35b610286600480360381019061028191906128fb565b61189c565b005b610290611d7a565b60405161029d9190612987565b60405180910390f35b6102ae611d9e565b6040516102bb91906129c3565b60405180910390f35b6102de60048036038101906102d99190612a0a565b611dc2565b005b6102e8611eb9565b6040516102f59190612706565b60405180910390f35b610306611ebf565b73ffffffffffffffffffffffffffffffffffffffff16610324611873565b73ffffffffffffffffffffffffffffffffffffffff161461037a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037190612a94565b60405180910390fd5b7f8987e6f43a6c6bf408c8c427dceb2f98377f859348939ef4ab7b770b510a395a600254826040516103ad929190612ab4565b60405180910390a18060028190555050565b60006103f37f00000000000000000000000000000000000000000000000000000000000000006103ee84611ec7565b611ef7565b9050919050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b60025481565b600154821115610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff90612b29565b60405180910390fd5b6000600360008481526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069f90612b95565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168260400160208101906106d39190612a0a565b73ffffffffffffffffffffffffffffffffffffffff1603610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072090612c01565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168260000160208101906107549190612a0a565b73ffffffffffffffffffffffffffffffffffffffff16036107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a190612c6d565b60405180910390fd5b6000816040015190508260000160208101906107c69190612a0a565b826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050826020013582606001818152505082604001602081019061081e9190612a0a565b826040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816003600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301559050507fa2f7e907e712d4a209c1edcf720be2ba2b6b369166e415d492994b46c70c09478260405161097a9190612d00565b60405180910390a18073ffffffffffffffffffffffffffffffffffffffff168360400160208101906109ac9190612a0a565b73ffffffffffffffffffffffffffffffffffffffff1614610a99578260400160208101906109da9190612a0a565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a54929190612d1b565b6020604051808303816000875af1158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a979190612d7c565b505b50505050565b6000610ab384610aae90612da9565b611ec7565b9050600073ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4e90612e08565b60405180910390fd5b6001838390501015610b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9590612e74565b60405180910390fd5b600060036000866000013581526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060015485600001351115610d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1090612b29565b60405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8290612ee0565b60405180910390fd5b6000610d9f86610d9a90612da9565b6103bf565b90508073ffffffffffffffffffffffffffffffffffffffff167f5cac467a9f516dfefc872243d16e0a608f33ffa3ef9ecde3f5bcc88f4e4fbec087604051610de79190613016565b60405180910390a2610e3a83868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611f0c565b50505050505050565b60015482600001351115610e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8390612b29565b60405180910390fd5b600060036000846000013581526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102790612ee0565b60405180910390fd5b60006110448461103f90612da9565b611ec7565b905060006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111af576000600167ffffffffffffffff8111156110cf576110ce612404565b5b6040519080825280602002602001820160405280156110fd5781602001602082028036833780820191505090505b50905083600001518160008151811061111957611118613038565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061115d8382611f0c565b91508173ffffffffffffffffffffffffffffffffffffffff167f5cac467a9f516dfefc872243d16e0a608f33ffa3ef9ecde3f5bcc88f4e4fbec0876040516111a59190613016565b60405180910390a2505b7f4e9cc86b1370c2f6c435e2051a21470d3a62fa34d77277ed8bcd6855ea9e249d85856040516111e09291906130d8565b60405180910390a160007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff168560000160208101906112379190612a0a565b73ffffffffffffffffffffffffffffffffffffffff160361167d57600061126f85606001518760400135611fff90919063ffffffff16565b9050600061128c6002548860400135611fff90919063ffffffff16565b90506000600367ffffffffffffffff8111156112ab576112aa612404565b5b6040519080825280602002602001820160405280156112e457816020015b6112d161232a565b8152602001906001900390816112c95790505b50905060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001611316611873565b73ffffffffffffffffffffffffffffffffffffffff168152602001838152508160008151811061134957611348613038565b5b602002602001018190525060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200189602001602081019061138e9190612a0a565b73ffffffffffffffffffffffffffffffffffffffff16815260200184846113b59190613137565b8a604001356113c4919061318d565b815250816001815181106113db576113da613038565b5b602002602001018190525060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001848152508160028151811061144157611440613038565b5b60200260200101819052508473ffffffffffffffffffffffffffffffffffffffff166332a06d3a826040518263ffffffff1660e01b815260040161148591906132b2565b600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115469190613312565b73ffffffffffffffffffffffffffffffffffffffff1663395093517f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b81526004016115a0929190612d1b565b6020604051808303816000875af11580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e39190612d7c565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a8031a1d8860400151856040518363ffffffff1660e01b8152600401611643929190612d1b565b600060405180830381600087803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b505050505050506117bf565b6000600167ffffffffffffffff81111561169a57611699612404565b5b6040519080825280602002602001820160405280156116d357816020015b6116c061232a565b8152602001906001900390816116b85790505b50905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018760200160208101906117109190612a0a565b73ffffffffffffffffffffffffffffffffffffffff16815260200187604001358152508160008151811061174757611746613038565b5b60200260200101819052508273ffffffffffffffffffffffffffffffffffffffff166332a06d3a826040518263ffffffff1660e01b815260040161178b91906132b2565b600060405180830381600087803b1580156117a557600080fd5b505af11580156117b9573d6000803e3d6000fd5b50505050505b505050505050565b6117cf611ebf565b73ffffffffffffffffffffffffffffffffffffffff166117ed611873565b73ffffffffffffffffffffffffffffffffffffffff1614611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183a90612a94565b60405180910390fd5b61184d6000612013565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168160000160208101906118c79190612a0a565b73ffffffffffffffffffffffffffffffffffffffff160361191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490612c6d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160400160208101906119489190612a0a565b73ffffffffffffffffffffffffffffffffffffffff160361199e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199590612c01565b60405180910390fd5b60006001600081546119af9061333f565b9190508190559050600060405180608001604052808460000160208101906119d79190612a0a565b73ffffffffffffffffffffffffffffffffffffffff168152602001611a2e604051806040016040528086815260200186604051602001611a179190612706565b6040516020818303038152906040528152506103bf565b73ffffffffffffffffffffffffffffffffffffffff168152602001846040016020810190611a5c9190612a0a565b73ffffffffffffffffffffffffffffffffffffffff16815260200184602001358152509050806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301559050507fe8398fc8998c286ad0bf21e1bc3aa5a928141b91733e693bc0662bd3a5285c9681604051611ba69190612d00565b60405180910390a16000600167ffffffffffffffff811115611bcb57611bca612404565b5b604051908082528060200260200182016040528015611bf95781602001602082028036833780820191505090505b509050836000016020810190611c0f9190612a0a565b81600081518110611c2357611c22613038565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611ca2611c9c604051806040016040528086815260200186604051602001611c859190612706565b604051602081830303815290604052815250611ec7565b82611f0c565b50836040016020810190611cb69190612a0a565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611d30929190612d1b565b6020604051808303816000875af1158015611d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d739190612d7c565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b611dca611ebf565b73ffffffffffffffffffffffffffffffffffffffff16611de8611873565b73ffffffffffffffffffffffffffffffffffffffff1614611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3590612a94565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea4906133f9565b60405180910390fd5b611eb681612013565b50565b60015481565b600033905090565b600081604051602001611eda91906134cd565b604051602081830303815290604052805190602001209050919050565b6000611f048383306120d7565b905092915050565b6000611f387f000000000000000000000000000000000000000000000000000000000000000084612157565b9050806004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663946d920430846040518363ffffffff1660e01b8152600401611fc792919061359e565b600060405180830381600087803b158015611fe157600080fd5b505af1158015611ff5573d6000803e3d6000fd5b5050505092915050565b600061200b838361222d565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528460601b60148201527f5af43d82803e903d91602b57fd5bf3ff0000000000000000000000000000000060288201528260601b603882015283604c82015260378120606c820152605560378201209150509392505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f5915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221e9061361a565b60405180910390fd5b92915050565b60008060008019848609848602925082811083820303915050670de0b6b3a7640000811061229257806040517fd31b34020000000000000000000000000000000000000000000000000000000081526004016122899190612706565b60405180910390fd5b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050600083036122de5780670de0b6b3a764000085816122d1576122d061363a565b5b0401945050505050612324565b807faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac1066960016204000080600003040186851186030262040000858803041702019450505050505b92915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61239e8161238b565b81146123a957600080fd5b50565b6000813590506123bb81612395565b92915050565b6000602082840312156123d7576123d6612381565b5b60006123e5848285016123ac565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61243c826123f3565b810181811067ffffffffffffffff8211171561245b5761245a612404565b5b80604052505050565b600061246e612377565b905061247a8282612433565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156124a9576124a8612404565b5b6124b2826123f3565b9050602081019050919050565b82818337600083830152505050565b60006124e16124dc8461248e565b612464565b9050828152602081018484840111156124fd576124fc612489565b5b6125088482856124bf565b509392505050565b600082601f83011261252557612524612484565b5b81356125358482602086016124ce565b91505092915050565b600060408284031215612554576125536123ee565b5b61255e6040612464565b9050600061256e848285016123ac565b600083015250602082013567ffffffffffffffff8111156125925761259161247f565b5b61259e84828501612510565b60208301525092915050565b6000602082840312156125c0576125bf612381565b5b600082013567ffffffffffffffff8111156125de576125dd612386565b5b6125ea8482850161253e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061261e826125f3565b9050919050565b61262e81612613565b82525050565b60006020820190506126496000830184612625565b92915050565b6000819050919050565b6126628161264f565b811461266d57600080fd5b50565b60008135905061267f81612659565b92915050565b60006020828403121561269b5761269a612381565b5b60006126a984828501612670565b91505092915050565b6126bb8161238b565b82525050565b60006080820190506126d66000830187612625565b6126e36020830186612625565b6126f06040830185612625565b6126fd60608301846126b2565b95945050505050565b600060208201905061271b60008301846126b2565b92915050565b600080fd5b60006060828403121561273c5761273b612721565b5b81905092915050565b6000806080838503121561275c5761275b612381565b5b600061276a858286016123ac565b925050602061277b85828601612726565b9150509250929050565b60006040828403121561279b5761279a612721565b5b81905092915050565b600080fd5b600080fd5b60008083601f8401126127c4576127c3612484565b5b8235905067ffffffffffffffff8111156127e1576127e06127a4565b5b6020830191508360208202830111156127fd576127fc6127a9565b5b9250929050565b60008060006040848603121561281d5761281c612381565b5b600084013567ffffffffffffffff81111561283b5761283a612386565b5b61284786828701612785565b935050602084013567ffffffffffffffff81111561286857612867612386565b5b612874868287016127ae565b92509250509250925092565b60006060828403121561289657612895612721565b5b81905092915050565b600080608083850312156128b6576128b5612381565b5b600083013567ffffffffffffffff8111156128d4576128d3612386565b5b6128e085828601612785565b92505060206128f185828601612880565b9150509250929050565b60006060828403121561291157612910612381565b5b600061291f84828501612726565b91505092915050565b6000819050919050565b600061294d612948612943846125f3565b612928565b6125f3565b9050919050565b600061295f82612932565b9050919050565b600061297182612954565b9050919050565b61298181612966565b82525050565b600060208201905061299c6000830184612978565b92915050565b60006129ad82612954565b9050919050565b6129bd816129a2565b82525050565b60006020820190506129d860008301846129b4565b92915050565b6129e781612613565b81146129f257600080fd5b50565b600081359050612a04816129de565b92915050565b600060208284031215612a2057612a1f612381565b5b6000612a2e848285016129f5565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612a7e602083612a37565b9150612a8982612a48565b602082019050919050565b60006020820190508181036000830152612aad81612a71565b9050919050565b6000604082019050612ac960008301856126b2565b612ad660208301846126b2565b9392505050565b7f696e76616c696420636175736500000000000000000000000000000000000000600082015250565b6000612b13600d83612a37565b9150612b1e82612add565b602082019050919050565b60006020820190508181036000830152612b4281612b06565b9050919050565b7f6e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b6000612b7f600e83612a37565b9150612b8a82612b49565b602082019050919050565b60006020820190508181036000830152612bae81612b72565b9050919050565b7f696e76616c696420746f6b656e00000000000000000000000000000000000000600082015250565b6000612beb600d83612a37565b9150612bf682612bb5565b602082019050919050565b60006020820190508181036000830152612c1a81612bde565b9050919050565b7f696e76616c6964206f776e657200000000000000000000000000000000000000600082015250565b6000612c57600d83612a37565b9150612c6282612c21565b602082019050919050565b60006020820190508181036000830152612c8681612c4a565b9050919050565b612c9681612613565b82525050565b612ca58161238b565b82525050565b608082016000820151612cc16000850182612c8d565b506020820151612cd46020850182612c8d565b506040820151612ce76040850182612c8d565b506060820151612cfa6060850182612c9c565b50505050565b6000608082019050612d156000830184612cab565b92915050565b6000604082019050612d306000830185612625565b612d3d60208301846126b2565b9392505050565b60008115159050919050565b612d5981612d44565b8114612d6457600080fd5b50565b600081519050612d7681612d50565b92915050565b600060208284031215612d9257612d91612381565b5b6000612da084828501612d67565b91505092915050565b6000612db5368361253e565b9050919050565b7f616c7265616479206465706c6f79656400000000000000000000000000000000600082015250565b6000612df2601083612a37565b9150612dfd82612dbc565b602082019050919050565b60006020820190508181036000830152612e2181612de5565b9050919050565b7f696e76616c6964206f776e657273000000000000000000000000000000000000600082015250565b6000612e5e600e83612a37565b9150612e6982612e28565b602082019050919050565b60006020820190508181036000830152612e8d81612e51565b9050919050565b7f756e617574686f72697a65640000000000000000000000000000000000000000600082015250565b6000612eca600c83612a37565b9150612ed582612e94565b602082019050919050565b60006020820190508181036000830152612ef981612ebd565b9050919050565b6000612f0f60208401846123ac565b905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612f4357612f42612f21565b5b83810192508235915060208301925067ffffffffffffffff821115612f6b57612f6a612f17565b5b600182023603841315612f8157612f80612f1c565b5b509250929050565b600082825260208201905092915050565b6000612fa68385612f89565b9350612fb38385846124bf565b612fbc836123f3565b840190509392505050565b600060408301612fda6000840184612f00565b612fe76000860182612c9c565b50612ff56020840184612f26565b8583036020870152613008838284612f9a565b925050508091505092915050565b600060208201905081810360008301526130308184612fc7565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061307660208401846129f5565b905092915050565b6060820161308f6000830183613067565b61309c6000850182612c8d565b506130aa6020830183613067565b6130b76020850182612c8d565b506130c56040830183612f00565b6130d26040850182612c9c565b50505050565b600060808201905081810360008301526130f28185612fc7565b9050613101602083018461307e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131428261238b565b915061314d8361238b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561318257613181613108565b5b828201905092915050565b60006131988261238b565b91506131a38361238b565b9250828210156131b6576131b5613108565b5b828203905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6060820160008201516132036000850182612c8d565b5060208201516132166020850182612c8d565b5060408201516132296040850182612c9c565b50505050565b600061323b83836131ed565b60608301905092915050565b6000602082019050919050565b600061325f826131c1565b61326981856131cc565b9350613274836131dd565b8060005b838110156132a557815161328c888261322f565b975061329783613247565b925050600181019050613278565b5085935050505092915050565b600060208201905081810360008301526132cc8184613254565b905092915050565b60006132df82612613565b9050919050565b6132ef816132d4565b81146132fa57600080fd5b50565b60008151905061330c816132e6565b92915050565b60006020828403121561332857613327612381565b5b6000613336848285016132fd565b91505092915050565b600061334a8261238b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361337c5761337b613108565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006133e3602683612a37565b91506133ee82613387565b604082019050919050565b60006020820190508181036000830152613412816133d6565b9050919050565b600081519050919050565b60005b83811015613442578082015181840152602081019050613427565b83811115613451576000848401525b50505050565b600061346282613419565b61346c8185612f89565b935061347c818560208601613424565b613485816123f3565b840191505092915050565b60006040830160008301516134a86000860182612c9c565b50602083015184820360208601526134c08282613457565b9150508091505092915050565b600060208201905081810360008301526134e78184613490565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006135278383612c8d565b60208301905092915050565b6000602082019050919050565b600061354b826134ef565b61355581856134fa565b93506135608361350b565b8060005b83811015613591578151613578888261351b565b975061358383613533565b925050600181019050613564565b5085935050505092915050565b60006040820190506135b36000830185612625565b81810360208301526135c58184613540565b90509392505050565b7f455243313136373a2063726561746532206661696c6564000000000000000000600082015250565b6000613604601783612a37565b915061360f826135ce565b602082019050919050565b60006020820190508181036000830152613633816135f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220ef5e696f5936116d1da0fbad186ef7e961883f541d1c3ab2870a49e82d94187f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateThinWallet((uint256,bytes))": {
        "params": {
          "_walletId": "The wallet parameters to calculate the address from"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerCause((address,uint256,address))": {
        "details": "This should be an open function",
        "params": {
          "_cause": "The cause to be registered"
        }
      },
      "registerThinWallet((uint256,bytes),address[])": {
        "params": {
          "_owners": "The wallet owners to set. These accounts can transfer funds, so they should be limited",
          "_walletId": "The wallet parameters"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPlatformFee(uint256)": {
        "details": "Only the platform owner should be able to call this",
        "params": {
          "_fee": "The new platform fee"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCause(uint256,(address,uint256,address))": {
        "details": "Can only be called by the current owner of the cause",
        "params": {
          "_cause": "The new details of the cause",
          "_causeId": "The cause to update"
        }
      },
      "withdrawFromThinWallet((uint256,bytes),(address,address,uint256))": {
        "params": {
          "_walletId": "The wallet address parameters",
          "_withdrawal": "An array of withdrawal requests for the wallet to process"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "events": {
      "RegisterCause((address,address,address,uint256))": {
        "notice": "### Events"
      }
    },
    "kind": "user",
    "methods": {
      "baseToken()": {
        "notice": "### Autogenerated getters"
      },
      "calculateThinWallet((uint256,bytes))": {
        "notice": "Calculates the address that a given thin wallet is or will be deployed to"
      },
      "causeRecords(uint256)": {
        "notice": "Cause ID => Cause record"
      },
      "deployedWallets(bytes32)": {
        "notice": "Thin wallet salt => thin wallet address"
      },
      "registerCause((address,uint256,address))": {
        "notice": "Creates a cause so that it can start using thin wallets that it controls"
      },
      "registerThinWallet((uint256,bytes),address[])": {
        "notice": "Deploys a thin wallet to the address derived from the parameters given"
      },
      "setPlatformFee(uint256)": {
        "notice": "Allows the platform owner to set the platform fee"
      },
      "updateCause(uint256,(address,uint256,address))": {
        "notice": "Updates a cause"
      },
      "withdrawFromThinWallet((uint256,bytes),(address,address,uint256))": {
        "notice": "Withdraws funds from the specified thin wallet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6934,
        "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11964,
        "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
        "label": "causeId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11967,
        "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
        "label": "platformFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11974,
        "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
        "label": "causeRecords",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(CauseRecord)14751_storage)"
      },
      {
        "astId": 11980,
        "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
        "label": "deployedWallets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(CauseRecord)14751_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDonationsRouter.CauseRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(CauseRecord)14751_storage"
      },
      "t_struct(CauseRecord)14751_storage": {
        "encoding": "inplace",
        "label": "struct IDonationsRouter.CauseRecord",
        "members": [
          {
            "astId": 14743,
            "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14745,
            "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
            "label": "defaultWallet",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 14748,
            "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
            "label": "daoToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 14750,
            "contract": "contracts/implementations/DonationsRouter.sol:DonationsRouter",
            "label": "rewardPercentage",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}