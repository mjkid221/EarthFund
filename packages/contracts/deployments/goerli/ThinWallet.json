{
  "address": "0x1c584B488664EbdeFa28A2D88edF3dBBD4524068",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "InvalidPermissions",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IThinWallet.TokenMovement[]",
          "name": "transfers",
          "type": "tuple[]"
        }
      ],
      "name": "TransferERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IThinWallet.EtherPaymentTransfer[]",
          "name": "transfers",
          "type": "tuple[]"
        }
      ],
      "name": "TransferEther",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        }
      ],
      "name": "emergencyEjectERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        }
      ],
      "name": "emergencyEjectEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IThinWallet.TokenMovement[]",
          "name": "_transfers",
          "type": "tuple[]"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IThinWallet.EtherPaymentTransfer[]",
          "name": "_transfers",
          "type": "tuple[]"
        }
      ],
      "name": "transferEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdaf31c13440abcb01286fb4e548888606b5ad49bc2e16a4c449d5184a928e5e3",
  "receipt": {
    "to": null,
    "from": "0x0C56c62ecf7Cd3965A57B5D9A7974EeE578714C3",
    "contractAddress": "0x1c584B488664EbdeFa28A2D88edF3dBBD4524068",
    "transactionIndex": 2,
    "gasUsed": "2301785",
    "logsBloom": "0x
    "blockHash": "0xf5e0463dae6bf5b5dbc17cfb09e23a6488a976cdf3bfa5b33ac178e81bb80fd8",
    "transactionHash": "0xdaf31c13440abcb01286fb4e548888606b5ad49bc2e16a4c449d5184a928e5e3",
    "logs": [],
    "blockNumber": 7714533,
    "cumulativeGasUsed": "4806071",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fd0195eb1b5ab6b8bdcc6d00ee2302e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"InvalidPermissions\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IThinWallet.TokenMovement[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IThinWallet.EtherPaymentTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"TransferEther\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"emergencyEjectERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"emergencyEjectEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IThinWallet.TokenMovement[]\",\"name\":\"_transfers\",\"type\":\"tuple[]\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IThinWallet.EtherPaymentTransfer[]\",\"name\":\"_transfers\",\"type\":\"tuple[]\"}],\"name\":\"transferEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyEjectERC20(address,address)\":{\"params\":{\"_destination\":\"The acccount to send the tokens to\",\"_token\":\"The token to transfer\"}},\"emergencyEjectEth(address)\":{\"params\":{\"_destination\":\"The account to send the ether to.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferERC20((address,address,uint256)[])\":{\"details\":\"If the `setApprove` field is true, the contract should approve that recipient for type(uint256).max\",\"params\":{\"_transfers\":\"An array of transfers. Each transfer object specifies the amount and recipient to send tokens to\"}},\"transferEther((address,uint256)[])\":{\"details\":\"This should use address(recipient).call to transfer the ether\",\"params\":{\"_transfers\":\"The ether transfers\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TransferERC20((address,address,uint256)[])\":{\"notice\":\"### Events\"}},\"kind\":\"user\",\"methods\":{\"emergencyEjectERC20(address,address)\":{\"notice\":\"Transfers the current balance of a token to a destination without processing a split\"},\"emergencyEjectEth(address)\":{\"notice\":\"Transfers the current balance of Ether to the destination without processing a split\"},\"initialize(address,address[])\":{\"notice\":\"### Functions\"},\"transferERC20((address,address,uint256)[])\":{\"notice\":\"Transfers amounts of an ERC20 to one or more recipients\"},\"transferEther((address,uint256)[])\":{\"notice\":\"Transfers amounts of ether to one or more recipeints\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementations/ThinWallet.sol\":\"ThinWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/implementations/ThinWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/IThinWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ThinWallet is IThinWallet, Initializable, AccessControl {\\n  using SafeERC20 for IERC20;\\n\\n  // Access Control Role Definitions\\n  bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER\\\");\\n  bytes32 public constant TRANSFER_ADMIN_ROLE = keccak256(\\\"TRANSFER_ADMIN\\\");\\n\\n  // Store admin address\\n  address public admin;\\n\\n  /// ### Functions\\n  function initialize(address _admin, address[] calldata _owners) external {\\n    require(_admin != address(0), \\\"admin address cannot be 0x0\\\");\\n    admin = _admin;\\n    _setupRole(TRANSFER_ADMIN_ROLE, _admin);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    for (uint64 i = 0; i < _owners.length; i++) {\\n      require(_owners[i] != address(0), \\\"owner cannot be 0x0\\\");\\n      _setupRole(TRANSFER_ROLE, _owners[i]);\\n      _setupRole(TRANSFER_ADMIN_ROLE, _owners[i]);\\n    }\\n  }\\n\\n  function transferERC20(TokenMovement[] calldata _transfers) external {\\n    if (!(hasRole(TRANSFER_ROLE, msg.sender) || msg.sender == admin)) {\\n      revert InvalidPermissions(msg.sender);\\n    }\\n\\n    emit TransferERC20(_transfers);\\n\\n    for (uint64 i = 0; i < _transfers.length; i++) {\\n      IERC20 token = IERC20(_transfers[i].token);\\n      token.safeTransfer(_transfers[i].recipient, _transfers[i].amount);\\n    }\\n  }\\n\\n  function transferEther(EtherPaymentTransfer[] calldata _transfers) external {\\n    if (!(hasRole(TRANSFER_ROLE, msg.sender) || msg.sender == admin)) {\\n      revert InvalidPermissions(msg.sender);\\n    }\\n    emit TransferEther(_transfers);\\n    for (uint64 i = 0; i < _transfers.length; i++) {\\n      (bool success, ) = address(_transfers[i].recipient).call{\\n        value: _transfers[i].amount\\n      }(\\\"\\\");\\n      require(success, \\\"failed to send ether\\\");\\n    }\\n  }\\n\\n  function emergencyEjectERC20(address _token, address _destination)\\n    external\\n    override\\n  {\\n    if (!(hasRole(TRANSFER_ROLE, msg.sender) || msg.sender == admin)) {\\n      revert InvalidPermissions(msg.sender);\\n    }\\n    if (_token == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    if (_destination == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    IERC20 token = IERC20(_token);\\n    token.safeTransfer(_destination, token.balanceOf(address(this)));\\n  }\\n\\n  function emergencyEjectEth(address _destination) external override {\\n    if (!(hasRole(TRANSFER_ROLE, msg.sender) || msg.sender == admin)) {\\n      revert InvalidPermissions(msg.sender);\\n    }\\n    if (_destination == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    (bool success, ) = _destination.call{ value: address(this).balance }(\\\"\\\");\\n    require(success, \\\"failed to send ether\\\");\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb2a0f823b96b634f2dcb698e9ff50b348e562c13768f40c79e1309daea1c860b\",\"license\":\"MIT\"},\"contracts/interfaces/IThinWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IThinWallet {\\n    error InvalidPermissions(address _user);\\n    error InvalidAddress();\\n\\n    struct TokenMovement {\\n        address token;\\n        address recipient;\\n        uint256 amount;\\n    }\\n\\n    struct EtherPaymentTransfer {\\n        address recipient;\\n        uint256 amount;\\n    }\\n\\n    /// ### Events\\n    event TransferERC20(TokenMovement[] transfers);\\n    event TransferEther(EtherPaymentTransfer[] transfers);\\n\\n    /// ### Functions\\n    /// @notice Initializes the thin wallet clone with the accounts that can control it\\n    /// @param _admin  This is should be set as the default admin. This will be the donation router\\n    /// @param _owners  The accounts that can call the transfer functions\\n    function initialize(address _admin, address[] calldata _owners) external;\\n\\n    /// @notice Transfers amounts of an ERC20 to one or more recipients\\n    /// @dev If the `setApprove` field is true, the contract should approve that recipient for type(uint256).max\\n    /// @param _transfers  An array of transfers. Each transfer object specifies the amount and recipient to send tokens to\\n    function transferERC20(TokenMovement[] calldata _transfers) external;\\n\\n    /// @notice Transfers amounts of ether to one or more recipeints\\n    /// @dev This should use address(recipient).call to transfer the ether\\n    /// @param _transfers  The ether transfers\\n    function transferEther(EtherPaymentTransfer[] calldata _transfers) external;\\n\\n    /// @notice Transfers the current balance of a token to a destination without processing a split\\n    /// @param _token  The token to transfer\\n    /// @param _destination  The acccount to send the tokens to\\n    function emergencyEjectERC20(address _token, address _destination) external;\\n\\n    /// @notice Transfers the current balance of Ether to the destination without processing a split\\n    /// @param _destination  The account to send the ether to.\\n    function emergencyEjectEth(address _destination) external;\\n}\\n\",\"keccak256\":\"0x941251738cb077295e012c50687145c19b874e609a3d10b6c89ec566720ffac4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128de806100206000396000f3fe6080604052600436106100ec5760003560e01c806368a37ae81161008a578063a217fddf11610059578063a217fddf146102fb578063d547741f14610326578063e7f7668e1461034f578063f851a44014610378576100f3565b806368a37ae81461024157806391d148541461026c578063946d9204146102a957806398a3caf5146102d2576100f3565b8063248a9ca3116100c6578063248a9ca3146101895780632f2ff15d146101c657806332a06d3a146101ef57806336568abe14610218576100f3565b806301ffc9a7146100f857806302b9d21d14610135578063206b60f91461015e576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190611914565b6103a3565b60405161012c919061195c565b60405180910390f35b34801561014157600080fd5b5061015c600480360381019061015791906119dc565b61041d565b005b34801561016a57600080fd5b50610173610650565b6040516101809190611a42565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab9190611a89565b610674565b6040516101bd9190611a42565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190611b14565b610694565b005b3480156101fb57600080fd5b5061021660048036038101906102119190611baa565b6106bd565b005b34801561022457600080fd5b5061023f600480360381019061023a9190611b14565b6108a8565b005b34801561024d57600080fd5b5061025661092b565b6040516102639190611a42565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190611b14565b61094f565b6040516102a0919061195c565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb9190611c4d565b6109ba565b005b3480156102de57600080fd5b506102f960048036038101906102f49190611cad565b610c28565b005b34801561030757600080fd5b50610310610e01565b60405161031d9190611a42565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190611b14565b610e08565b005b34801561035b57600080fd5b5061037660048036038101906103719190611cda565b610e31565b005b34801561038457600080fd5b5061038d61106e565b60405161039a9190611d29565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610416575061041582611094565b5b9050919050565b6104477f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b8061049f5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6104e057336040517ff9ba0a320000000000000000000000000000000000000000000000000000000081526004016104d79190611d29565b60405180910390fd5b7fc1e7ec1a8a17687668d538f95a36ade1bc8652575890097064778362136b9f578282604051610511929190611ead565b60405180910390a160005b828290508167ffffffffffffffff16101561064b57600083838367ffffffffffffffff168181106105505761054f611ed1565b5b90506040020160000160208101906105689190611cad565b73ffffffffffffffffffffffffffffffffffffffff1684848467ffffffffffffffff1681811061059b5761059a611ed1565b5b905060400201602001356040516105b190611f31565b60006040518083038185875af1925050503d80600081146105ee576040519150601f19603f3d011682016040523d82523d6000602084013e6105f3565b606091505b5050905080610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e90611fa3565b60405180910390fd5b50808061064390612006565b91505061051c565b505050565b7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba3777781565b600060016000838152602001908152602001600020600101549050919050565b61069d82610674565b6106ae816106a96110fe565b611106565b6106b883836111a3565b505050565b6106e77f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b8061073f5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61078057336040517ff9ba0a320000000000000000000000000000000000000000000000000000000081526004016107779190611d29565b60405180910390fd5b7f6aac0c7bc78083f9d8600911f1df6c4627e5dd66fe3e9c6e6958dfe5959d67c982826040516107b1929190612138565b60405180910390a160005b828290508167ffffffffffffffff1610156108a357600083838367ffffffffffffffff168181106107f0576107ef611ed1565b5b90506060020160000160208101906108089190611cad565b905061088f84848467ffffffffffffffff1681811061082a57610829611ed1565b5b90506060020160200160208101906108429190611cad565b85858567ffffffffffffffff1681811061085f5761085e611ed1565b5b905060600201604001358373ffffffffffffffffffffffffffffffffffffffff166112839092919063ffffffff16565b50808061089b90612006565b9150506107bc565b505050565b6108b06110fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461091d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610914906121ce565b60405180910390fd5b6109278282611309565b5050565b7fb371867bc9c0f0d0a9733da0be5b600a167f1a96096318687c91de22c7ddf8da81565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a209061223a565b60405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a947fb371867bc9c0f0d0a9733da0be5b600a167f1a96096318687c91de22c7ddf8da846113eb565b610aa16000801b846113eb565b60005b828290508167ffffffffffffffff161015610c2257600073ffffffffffffffffffffffffffffffffffffffff1683838367ffffffffffffffff16818110610aee57610aed611ed1565b5b9050602002016020810190610b039190611cad565b73ffffffffffffffffffffffffffffffffffffffff1603610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b50906122a6565b60405180910390fd5b610bb47f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba3777784848467ffffffffffffffff16818110610b9a57610b99611ed1565b5b9050602002016020810190610baf9190611cad565b6113eb565b610c0f7fb371867bc9c0f0d0a9733da0be5b600a167f1a96096318687c91de22c7ddf8da84848467ffffffffffffffff16818110610bf557610bf4611ed1565b5b9050602002016020810190610c0a9190611cad565b6113eb565b8080610c1a90612006565b915050610aa4565b50505050565b610c527f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b80610caa5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ceb57336040517ff9ba0a32000000000000000000000000000000000000000000000000000000008152600401610ce29190611d29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d51576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1647604051610d7790611f31565b60006040518083038185875af1925050503d8060008114610db4576040519150601f19603f3d011682016040523d82523d6000602084013e610db9565b606091505b5050905080610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490611fa3565b60405180910390fd5b5050565b6000801b81565b610e1182610674565b610e2281610e1d6110fe565b611106565b610e2c8383611309565b505050565b610e5b7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b80610eb35750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ef457336040517ff9ba0a32000000000000000000000000000000000000000000000000000000008152600401610eeb9190611d29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f5a576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fc0576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000829050611069828273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110029190611d29565b602060405180830381865afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104391906122db565b8373ffffffffffffffffffffffffffffffffffffffff166112839092919063ffffffff16565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b611110828261094f565b61119f576111358173ffffffffffffffffffffffffffffffffffffffff1660146113f9565b6111438360001c60206113f9565b60405160200161115492919061241a565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611196919061249e565b60405180910390fd5b5050565b6111ad828261094f565b61127f57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506112246110fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6113048363a9059cbb60e01b84846040516024016112a29291906124cf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611635565b505050565b611313828261094f565b156113e75760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061138c6110fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6113f582826111a3565b5050565b60606000600283600261140c91906124f8565b6114169190612552565b67ffffffffffffffff81111561142f5761142e6125a8565b5b6040519080825280601f01601f1916602001820160405280156114615781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061149957611498611ed1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106114fd576114fc611ed1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261153d91906124f8565b6115479190612552565b90505b60018111156115e7577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061158957611588611ed1565b5b1a60f81b8282815181106115a05761159f611ed1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806115e0906125d7565b905061154a565b506000841461162b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116229061264c565b60405180910390fd5b8091505092915050565b6000611697826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116fc9092919063ffffffff16565b90506000815111156116f757808060200190518101906116b79190612698565b6116f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ed90612737565b60405180910390fd5b5b505050565b606061170b8484600085611714565b90509392505050565b606082471015611759576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611750906127c9565b60405180910390fd5b61176285611828565b6117a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179890612835565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117ca9190612891565b60006040518083038185875af1925050503d8060008114611807576040519150601f19603f3d011682016040523d82523d6000602084013e61180c565b606091505b509150915061181c82828661184b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561185b578290506118ab565b60008351111561186e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a2919061249e565b60405180910390fd5b9392505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118f1816118bc565b81146118fc57600080fd5b50565b60008135905061190e816118e8565b92915050565b60006020828403121561192a576119296118b2565b5b6000611938848285016118ff565b91505092915050565b60008115159050919050565b61195681611941565b82525050565b6000602082019050611971600083018461194d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261199c5761199b611977565b5b8235905067ffffffffffffffff8111156119b9576119b861197c565b5b6020830191508360408202830111156119d5576119d4611981565b5b9250929050565b600080602083850312156119f3576119f26118b2565b5b600083013567ffffffffffffffff811115611a1157611a106118b7565b5b611a1d85828601611986565b92509250509250929050565b6000819050919050565b611a3c81611a29565b82525050565b6000602082019050611a576000830184611a33565b92915050565b611a6681611a29565b8114611a7157600080fd5b50565b600081359050611a8381611a5d565b92915050565b600060208284031215611a9f57611a9e6118b2565b5b6000611aad84828501611a74565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ae182611ab6565b9050919050565b611af181611ad6565b8114611afc57600080fd5b50565b600081359050611b0e81611ae8565b92915050565b60008060408385031215611b2b57611b2a6118b2565b5b6000611b3985828601611a74565b9250506020611b4a85828601611aff565b9150509250929050565b60008083601f840112611b6a57611b69611977565b5b8235905067ffffffffffffffff811115611b8757611b8661197c565b5b602083019150836060820283011115611ba357611ba2611981565b5b9250929050565b60008060208385031215611bc157611bc06118b2565b5b600083013567ffffffffffffffff811115611bdf57611bde6118b7565b5b611beb85828601611b54565b92509250509250929050565b60008083601f840112611c0d57611c0c611977565b5b8235905067ffffffffffffffff811115611c2a57611c2961197c565b5b602083019150836020820283011115611c4657611c45611981565b5b9250929050565b600080600060408486031215611c6657611c656118b2565b5b6000611c7486828701611aff565b935050602084013567ffffffffffffffff811115611c9557611c946118b7565b5b611ca186828701611bf7565b92509250509250925092565b600060208284031215611cc357611cc26118b2565b5b6000611cd184828501611aff565b91505092915050565b60008060408385031215611cf157611cf06118b2565b5b6000611cff85828601611aff565b9250506020611d1085828601611aff565b9150509250929050565b611d2381611ad6565b82525050565b6000602082019050611d3e6000830184611d1a565b92915050565b600082825260208201905092915050565b6000819050919050565b6000611d6e6020840184611aff565b905092915050565b611d7f81611ad6565b82525050565b6000819050919050565b611d9881611d85565b8114611da357600080fd5b50565b600081359050611db581611d8f565b92915050565b6000611dca6020840184611da6565b905092915050565b611ddb81611d85565b82525050565b60408201611df26000830183611d5f565b611dff6000850182611d76565b50611e0d6020830183611dbb565b611e1a6020850182611dd2565b50505050565b6000611e2c8383611de1565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6000611e5c8385611d44565b9350611e6782611d55565b8060005b85811015611ea057611e7d8284611e38565b611e878882611e20565b9750611e9283611e43565b925050600181019050611e6b565b5085925050509392505050565b60006020820190508181036000830152611ec8818486611e50565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000611f1b600083611f00565b9150611f2682611f0b565b600082019050919050565b6000611f3c82611f0e565b9150819050919050565b600082825260208201905092915050565b7f6661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000611f8d601483611f46565b9150611f9882611f57565b602082019050919050565b60006020820190508181036000830152611fbc81611f80565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff82169050919050565b600061201182611ff2565b915067ffffffffffffffff820361202b5761202a611fc3565b5b600182019050919050565b600082825260208201905092915050565b6000819050919050565b606082016120626000830183611d5f565b61206f6000850182611d76565b5061207d6020830183611d5f565b61208a6020850182611d76565b506120986040830183611dbb565b6120a56040850182611dd2565b50505050565b60006120b78383612051565b60608301905092915050565b600082905092915050565b6000606082019050919050565b60006120e78385612036565b93506120f282612047565b8060005b8581101561212b5761210882846120c3565b61211288826120ab565b975061211d836120ce565b9250506001810190506120f6565b5085925050509392505050565b600060208201905081810360008301526121538184866120db565b90509392505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006121b8602f83611f46565b91506121c38261215c565b604082019050919050565b600060208201905081810360008301526121e7816121ab565b9050919050565b7f61646d696e20616464726573732063616e6e6f74206265203078300000000000600082015250565b6000612224601b83611f46565b915061222f826121ee565b602082019050919050565b6000602082019050818103600083015261225381612217565b9050919050565b7f6f776e65722063616e6e6f742062652030783000000000000000000000000000600082015250565b6000612290601383611f46565b915061229b8261225a565b602082019050919050565b600060208201905081810360008301526122bf81612283565b9050919050565b6000815190506122d581611d8f565b92915050565b6000602082840312156122f1576122f06118b2565b5b60006122ff848285016122c6565b91505092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612349601783612308565b915061235482612313565b601782019050919050565b600081519050919050565b60005b8381101561238857808201518184015260208101905061236d565b83811115612397576000848401525b50505050565b60006123a88261235f565b6123b28185612308565b93506123c281856020860161236a565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612404601183612308565b915061240f826123ce565b601182019050919050565b60006124258261233c565b9150612431828561239d565b915061243c826123f7565b9150612448828461239d565b91508190509392505050565b6000601f19601f8301169050919050565b60006124708261235f565b61247a8185611f46565b935061248a81856020860161236a565b61249381612454565b840191505092915050565b600060208201905081810360008301526124b88184612465565b905092915050565b6124c981611d85565b82525050565b60006040820190506124e46000830185611d1a565b6124f160208301846124c0565b9392505050565b600061250382611d85565b915061250e83611d85565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561254757612546611fc3565b5b828202905092915050565b600061255d82611d85565b915061256883611d85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561259d5761259c611fc3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006125e282611d85565b9150600082036125f5576125f4611fc3565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612636602083611f46565b915061264182612600565b602082019050919050565b6000602082019050818103600083015261266581612629565b9050919050565b61267581611941565b811461268057600080fd5b50565b6000815190506126928161266c565b92915050565b6000602082840312156126ae576126ad6118b2565b5b60006126bc84828501612683565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612721602a83611f46565b915061272c826126c5565b604082019050919050565b6000602082019050818103600083015261275081612714565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006127b3602683611f46565b91506127be82612757565b604082019050919050565b600060208201905081810360008301526127e2816127a6565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061281f601d83611f46565b915061282a826127e9565b602082019050919050565b6000602082019050818103600083015261284e81612812565b9050919050565b600081519050919050565b600061286b82612855565b6128758185611f00565b935061288581856020860161236a565b80840191505092915050565b600061289d8284612860565b91508190509291505056fea2646970667358221220c74fb00263b60d77b30c69b9634fea2b9090d7896d5e1cf5560873b54d5637d764736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c806368a37ae81161008a578063a217fddf11610059578063a217fddf146102fb578063d547741f14610326578063e7f7668e1461034f578063f851a44014610378576100f3565b806368a37ae81461024157806391d148541461026c578063946d9204146102a957806398a3caf5146102d2576100f3565b8063248a9ca3116100c6578063248a9ca3146101895780632f2ff15d146101c657806332a06d3a146101ef57806336568abe14610218576100f3565b806301ffc9a7146100f857806302b9d21d14610135578063206b60f91461015e576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190611914565b6103a3565b60405161012c919061195c565b60405180910390f35b34801561014157600080fd5b5061015c600480360381019061015791906119dc565b61041d565b005b34801561016a57600080fd5b50610173610650565b6040516101809190611a42565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab9190611a89565b610674565b6040516101bd9190611a42565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190611b14565b610694565b005b3480156101fb57600080fd5b5061021660048036038101906102119190611baa565b6106bd565b005b34801561022457600080fd5b5061023f600480360381019061023a9190611b14565b6108a8565b005b34801561024d57600080fd5b5061025661092b565b6040516102639190611a42565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190611b14565b61094f565b6040516102a0919061195c565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb9190611c4d565b6109ba565b005b3480156102de57600080fd5b506102f960048036038101906102f49190611cad565b610c28565b005b34801561030757600080fd5b50610310610e01565b60405161031d9190611a42565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190611b14565b610e08565b005b34801561035b57600080fd5b5061037660048036038101906103719190611cda565b610e31565b005b34801561038457600080fd5b5061038d61106e565b60405161039a9190611d29565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610416575061041582611094565b5b9050919050565b6104477f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b8061049f5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6104e057336040517ff9ba0a320000000000000000000000000000000000000000000000000000000081526004016104d79190611d29565b60405180910390fd5b7fc1e7ec1a8a17687668d538f95a36ade1bc8652575890097064778362136b9f578282604051610511929190611ead565b60405180910390a160005b828290508167ffffffffffffffff16101561064b57600083838367ffffffffffffffff168181106105505761054f611ed1565b5b90506040020160000160208101906105689190611cad565b73ffffffffffffffffffffffffffffffffffffffff1684848467ffffffffffffffff1681811061059b5761059a611ed1565b5b905060400201602001356040516105b190611f31565b60006040518083038185875af1925050503d80600081146105ee576040519150601f19603f3d011682016040523d82523d6000602084013e6105f3565b606091505b5050905080610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e90611fa3565b60405180910390fd5b50808061064390612006565b91505061051c565b505050565b7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba3777781565b600060016000838152602001908152602001600020600101549050919050565b61069d82610674565b6106ae816106a96110fe565b611106565b6106b883836111a3565b505050565b6106e77f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b8061073f5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61078057336040517ff9ba0a320000000000000000000000000000000000000000000000000000000081526004016107779190611d29565b60405180910390fd5b7f6aac0c7bc78083f9d8600911f1df6c4627e5dd66fe3e9c6e6958dfe5959d67c982826040516107b1929190612138565b60405180910390a160005b828290508167ffffffffffffffff1610156108a357600083838367ffffffffffffffff168181106107f0576107ef611ed1565b5b90506060020160000160208101906108089190611cad565b905061088f84848467ffffffffffffffff1681811061082a57610829611ed1565b5b90506060020160200160208101906108429190611cad565b85858567ffffffffffffffff1681811061085f5761085e611ed1565b5b905060600201604001358373ffffffffffffffffffffffffffffffffffffffff166112839092919063ffffffff16565b50808061089b90612006565b9150506107bc565b505050565b6108b06110fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461091d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610914906121ce565b60405180910390fd5b6109278282611309565b5050565b7fb371867bc9c0f0d0a9733da0be5b600a167f1a96096318687c91de22c7ddf8da81565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a209061223a565b60405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a947fb371867bc9c0f0d0a9733da0be5b600a167f1a96096318687c91de22c7ddf8da846113eb565b610aa16000801b846113eb565b60005b828290508167ffffffffffffffff161015610c2257600073ffffffffffffffffffffffffffffffffffffffff1683838367ffffffffffffffff16818110610aee57610aed611ed1565b5b9050602002016020810190610b039190611cad565b73ffffffffffffffffffffffffffffffffffffffff1603610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b50906122a6565b60405180910390fd5b610bb47f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba3777784848467ffffffffffffffff16818110610b9a57610b99611ed1565b5b9050602002016020810190610baf9190611cad565b6113eb565b610c0f7fb371867bc9c0f0d0a9733da0be5b600a167f1a96096318687c91de22c7ddf8da84848467ffffffffffffffff16818110610bf557610bf4611ed1565b5b9050602002016020810190610c0a9190611cad565b6113eb565b8080610c1a90612006565b915050610aa4565b50505050565b610c527f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b80610caa5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ceb57336040517ff9ba0a32000000000000000000000000000000000000000000000000000000008152600401610ce29190611d29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d51576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1647604051610d7790611f31565b60006040518083038185875af1925050503d8060008114610db4576040519150601f19603f3d011682016040523d82523d6000602084013e610db9565b606091505b5050905080610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490611fa3565b60405180910390fd5b5050565b6000801b81565b610e1182610674565b610e2281610e1d6110fe565b611106565b610e2c8383611309565b505050565b610e5b7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba377773361094f565b80610eb35750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ef457336040517ff9ba0a32000000000000000000000000000000000000000000000000000000008152600401610eeb9190611d29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f5a576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fc0576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000829050611069828273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110029190611d29565b602060405180830381865afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104391906122db565b8373ffffffffffffffffffffffffffffffffffffffff166112839092919063ffffffff16565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b611110828261094f565b61119f576111358173ffffffffffffffffffffffffffffffffffffffff1660146113f9565b6111438360001c60206113f9565b60405160200161115492919061241a565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611196919061249e565b60405180910390fd5b5050565b6111ad828261094f565b61127f57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506112246110fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6113048363a9059cbb60e01b84846040516024016112a29291906124cf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611635565b505050565b611313828261094f565b156113e75760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061138c6110fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6113f582826111a3565b5050565b60606000600283600261140c91906124f8565b6114169190612552565b67ffffffffffffffff81111561142f5761142e6125a8565b5b6040519080825280601f01601f1916602001820160405280156114615781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061149957611498611ed1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106114fd576114fc611ed1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261153d91906124f8565b6115479190612552565b90505b60018111156115e7577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061158957611588611ed1565b5b1a60f81b8282815181106115a05761159f611ed1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806115e0906125d7565b905061154a565b506000841461162b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116229061264c565b60405180910390fd5b8091505092915050565b6000611697826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116fc9092919063ffffffff16565b90506000815111156116f757808060200190518101906116b79190612698565b6116f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ed90612737565b60405180910390fd5b5b505050565b606061170b8484600085611714565b90509392505050565b606082471015611759576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611750906127c9565b60405180910390fd5b61176285611828565b6117a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179890612835565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117ca9190612891565b60006040518083038185875af1925050503d8060008114611807576040519150601f19603f3d011682016040523d82523d6000602084013e61180c565b606091505b509150915061181c82828661184b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561185b578290506118ab565b60008351111561186e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a2919061249e565b60405180910390fd5b9392505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118f1816118bc565b81146118fc57600080fd5b50565b60008135905061190e816118e8565b92915050565b60006020828403121561192a576119296118b2565b5b6000611938848285016118ff565b91505092915050565b60008115159050919050565b61195681611941565b82525050565b6000602082019050611971600083018461194d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261199c5761199b611977565b5b8235905067ffffffffffffffff8111156119b9576119b861197c565b5b6020830191508360408202830111156119d5576119d4611981565b5b9250929050565b600080602083850312156119f3576119f26118b2565b5b600083013567ffffffffffffffff811115611a1157611a106118b7565b5b611a1d85828601611986565b92509250509250929050565b6000819050919050565b611a3c81611a29565b82525050565b6000602082019050611a576000830184611a33565b92915050565b611a6681611a29565b8114611a7157600080fd5b50565b600081359050611a8381611a5d565b92915050565b600060208284031215611a9f57611a9e6118b2565b5b6000611aad84828501611a74565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ae182611ab6565b9050919050565b611af181611ad6565b8114611afc57600080fd5b50565b600081359050611b0e81611ae8565b92915050565b60008060408385031215611b2b57611b2a6118b2565b5b6000611b3985828601611a74565b9250506020611b4a85828601611aff565b9150509250929050565b60008083601f840112611b6a57611b69611977565b5b8235905067ffffffffffffffff811115611b8757611b8661197c565b5b602083019150836060820283011115611ba357611ba2611981565b5b9250929050565b60008060208385031215611bc157611bc06118b2565b5b600083013567ffffffffffffffff811115611bdf57611bde6118b7565b5b611beb85828601611b54565b92509250509250929050565b60008083601f840112611c0d57611c0c611977565b5b8235905067ffffffffffffffff811115611c2a57611c2961197c565b5b602083019150836020820283011115611c4657611c45611981565b5b9250929050565b600080600060408486031215611c6657611c656118b2565b5b6000611c7486828701611aff565b935050602084013567ffffffffffffffff811115611c9557611c946118b7565b5b611ca186828701611bf7565b92509250509250925092565b600060208284031215611cc357611cc26118b2565b5b6000611cd184828501611aff565b91505092915050565b60008060408385031215611cf157611cf06118b2565b5b6000611cff85828601611aff565b9250506020611d1085828601611aff565b9150509250929050565b611d2381611ad6565b82525050565b6000602082019050611d3e6000830184611d1a565b92915050565b600082825260208201905092915050565b6000819050919050565b6000611d6e6020840184611aff565b905092915050565b611d7f81611ad6565b82525050565b6000819050919050565b611d9881611d85565b8114611da357600080fd5b50565b600081359050611db581611d8f565b92915050565b6000611dca6020840184611da6565b905092915050565b611ddb81611d85565b82525050565b60408201611df26000830183611d5f565b611dff6000850182611d76565b50611e0d6020830183611dbb565b611e1a6020850182611dd2565b50505050565b6000611e2c8383611de1565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6000611e5c8385611d44565b9350611e6782611d55565b8060005b85811015611ea057611e7d8284611e38565b611e878882611e20565b9750611e9283611e43565b925050600181019050611e6b565b5085925050509392505050565b60006020820190508181036000830152611ec8818486611e50565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000611f1b600083611f00565b9150611f2682611f0b565b600082019050919050565b6000611f3c82611f0e565b9150819050919050565b600082825260208201905092915050565b7f6661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000611f8d601483611f46565b9150611f9882611f57565b602082019050919050565b60006020820190508181036000830152611fbc81611f80565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff82169050919050565b600061201182611ff2565b915067ffffffffffffffff820361202b5761202a611fc3565b5b600182019050919050565b600082825260208201905092915050565b6000819050919050565b606082016120626000830183611d5f565b61206f6000850182611d76565b5061207d6020830183611d5f565b61208a6020850182611d76565b506120986040830183611dbb565b6120a56040850182611dd2565b50505050565b60006120b78383612051565b60608301905092915050565b600082905092915050565b6000606082019050919050565b60006120e78385612036565b93506120f282612047565b8060005b8581101561212b5761210882846120c3565b61211288826120ab565b975061211d836120ce565b9250506001810190506120f6565b5085925050509392505050565b600060208201905081810360008301526121538184866120db565b90509392505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006121b8602f83611f46565b91506121c38261215c565b604082019050919050565b600060208201905081810360008301526121e7816121ab565b9050919050565b7f61646d696e20616464726573732063616e6e6f74206265203078300000000000600082015250565b6000612224601b83611f46565b915061222f826121ee565b602082019050919050565b6000602082019050818103600083015261225381612217565b9050919050565b7f6f776e65722063616e6e6f742062652030783000000000000000000000000000600082015250565b6000612290601383611f46565b915061229b8261225a565b602082019050919050565b600060208201905081810360008301526122bf81612283565b9050919050565b6000815190506122d581611d8f565b92915050565b6000602082840312156122f1576122f06118b2565b5b60006122ff848285016122c6565b91505092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612349601783612308565b915061235482612313565b601782019050919050565b600081519050919050565b60005b8381101561238857808201518184015260208101905061236d565b83811115612397576000848401525b50505050565b60006123a88261235f565b6123b28185612308565b93506123c281856020860161236a565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612404601183612308565b915061240f826123ce565b601182019050919050565b60006124258261233c565b9150612431828561239d565b915061243c826123f7565b9150612448828461239d565b91508190509392505050565b6000601f19601f8301169050919050565b60006124708261235f565b61247a8185611f46565b935061248a81856020860161236a565b61249381612454565b840191505092915050565b600060208201905081810360008301526124b88184612465565b905092915050565b6124c981611d85565b82525050565b60006040820190506124e46000830185611d1a565b6124f160208301846124c0565b9392505050565b600061250382611d85565b915061250e83611d85565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561254757612546611fc3565b5b828202905092915050565b600061255d82611d85565b915061256883611d85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561259d5761259c611fc3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006125e282611d85565b9150600082036125f5576125f4611fc3565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612636602083611f46565b915061264182612600565b602082019050919050565b6000602082019050818103600083015261266581612629565b9050919050565b61267581611941565b811461268057600080fd5b50565b6000815190506126928161266c565b92915050565b6000602082840312156126ae576126ad6118b2565b5b60006126bc84828501612683565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612721602a83611f46565b915061272c826126c5565b604082019050919050565b6000602082019050818103600083015261275081612714565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006127b3602683611f46565b91506127be82612757565b604082019050919050565b600060208201905081810360008301526127e2816127a6565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061281f601d83611f46565b915061282a826127e9565b602082019050919050565b6000602082019050818103600083015261284e81612812565b9050919050565b600081519050919050565b600061286b82612855565b6128758185611f00565b935061288581856020860161236a565b80840191505092915050565b600061289d8284612860565b91508190509291505056fea2646970667358221220c74fb00263b60d77b30c69b9634fea2b9090d7896d5e1cf5560873b54d5637d764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyEjectERC20(address,address)": {
        "params": {
          "_destination": "The acccount to send the tokens to",
          "_token": "The token to transfer"
        }
      },
      "emergencyEjectEth(address)": {
        "params": {
          "_destination": "The account to send the ether to."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferERC20((address,address,uint256)[])": {
        "details": "If the `setApprove` field is true, the contract should approve that recipient for type(uint256).max",
        "params": {
          "_transfers": "An array of transfers. Each transfer object specifies the amount and recipient to send tokens to"
        }
      },
      "transferEther((address,uint256)[])": {
        "details": "This should use address(recipient).call to transfer the ether",
        "params": {
          "_transfers": "The ether transfers"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TransferERC20((address,address,uint256)[])": {
        "notice": "### Events"
      }
    },
    "kind": "user",
    "methods": {
      "emergencyEjectERC20(address,address)": {
        "notice": "Transfers the current balance of a token to a destination without processing a split"
      },
      "emergencyEjectEth(address)": {
        "notice": "Transfers the current balance of Ether to the destination without processing a split"
      },
      "initialize(address,address[])": {
        "notice": "### Functions"
      },
      "transferERC20((address,address,uint256)[])": {
        "notice": "Transfers amounts of an ERC20 to one or more recipients"
      },
      "transferEther((address,uint256)[])": {
        "notice": "Transfers amounts of ether to one or more recipeints"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7118,
        "contract": "contracts/implementations/ThinWallet.sol:ThinWallet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7121,
        "contract": "contracts/implementations/ThinWallet.sol:ThinWallet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6569,
        "contract": "contracts/implementations/ThinWallet.sol:ThinWallet",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)6564_storage)"
      },
      {
        "astId": 15696,
        "contract": "contracts/implementations/ThinWallet.sol:ThinWallet",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)6564_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)6564_storage"
      },
      "t_struct(RoleData)6564_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 6561,
            "contract": "contracts/implementations/ThinWallet.sol:ThinWallet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6563,
            "contract": "contracts/implementations/ThinWallet.sol:ThinWallet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}